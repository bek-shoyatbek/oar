// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  email        String?
  phone        String?
  password     String
  fullname     String?
  avatar       String?
  refreshToken String?
  Transactions Transactions[]
  MyCourse     MyCourses[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Courses {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  titleUz       String?
  titleRu       String?
  image         String?
  descriptionUz String?
  descriptionRu String?
  courseStatus  CourseStatus @default(inProgress)
  Module        Modules[]
  MyCourses     MyCourses?   @relation(fields: [myCoursesId], references: [id])
  myCoursesId   String?      @db.ObjectId
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Modules {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  titleUz       String?
  titleRu       String?
  descriptionUz String?
  descriptionRu String?
  course        Courses   @relation(fields: [courseId], references: [id])
  courseId      String    @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Lesson        Lessons[]
}

model Lessons {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  titleUz       String?
  titleRu       String?
  video         String
  descriptionUz String?
  descriptionRu String?
  attachedFiles String[] @default([])
  module        Modules  @relation(fields: [moduleId], references: [id])
  moduleId      String   @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Transactions {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  provider    PaymentProvider
  transId     String?           @unique
  amount      Float
  prepareId   Int?
  performTime DateTime?
  cancelTime  DateTime?
  reason      Int?
  status      TransactionStatus @default(PENDING)
  user        Users             @relation(fields: [userId], references: [id])
  userId      String            @db.ObjectId
  plan        Plans             @relation(fields: [planId], references: [id])
  planId      String            @db.ObjectId
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Plans {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  titleUz          String
  titleRu          String
  availablePeriod  Int // ! In days
  includeResources Boolean        @default(false)
  includeSupport   Boolean        @default(false)
  price            Float
  courseId         String         @db.ObjectId
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  Transactions     Transactions[]
  MyCourses        MyCourses[]
}

model MyCourses {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  courseId       String    @db.ObjectId
  planId         String    @db.ObjectId
  plan           Plans     @relation(fields: [planId], references: [id])
  user           Users     @relation(fields: [userId], references: [id])
  userId         String    @unique @db.ObjectId
  purchaseDate   DateTime  @default(now())
  expirationDate DateTime
  Courses        Courses[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Articles {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  titleUz      String
  titleRu      String
  headlineUz   String
  headlineRu   String
  textUz       String
  textRu       String
  articleImage String
  imageWeb     String
  imageMobile  String
  link         String
  isPublished  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Banners {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  imageWeb    String
  imageMobile String
  link        String
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comments {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  username    String
  userAvatar  String
  text        String
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum TransactionStatus {
  PENDING
  CREATED
  PAID
  CANCELED
}

enum PaymentProvider {
  payme
  uzum
  click
}

enum CourseStatus {
  completed
  inProgress
  archived
  reversed
}
