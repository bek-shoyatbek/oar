// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  email        String?
  phone        String?
  password     String
  name         String?
  surname      String?
  avatar       String?
  refreshToken String?
  role         UserRole       @default(user)
  Transactions Transactions[]
  MyCourse     MyCourses[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Courses {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  titleUz       String?
  titleRu       String?
  image         String?
  descriptionUz String?
  descriptionRu String?
  courseStatus  CourseStatus @default(inProgress)
  Module        Modules[]
  MyCourses     MyCourses?   @relation(fields: [myCoursesId], references: [id])
  myCoursesId   String?      @db.ObjectId
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Modules {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  titleUz       String?
  titleRu       String?
  descriptionUz String?
  descriptionRu String?
  course        Courses   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId      String    @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Lesson        Lessons[]
}

model Lessons {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  titleUz          String?
  titleRu          String?
  videoUz          String?
  videoRu          String?
  descriptionUz    String?
  descriptionRu    String?
  privateGroupLink String?
  attachedFiles    String[] @default([])
  module           Modules  @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId         String   @db.ObjectId
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Transactions {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  provider    PaymentProvider
  transId     String?           @unique
  amount      Float
  prepareId   Int?
  performTime DateTime?
  cancelTime  DateTime?
  reason      Int?
  state       Int?
  status      TransactionStatus @default(PENDING)
  user        Users             @relation(fields: [userId], references: [id])
  userId      String            @db.ObjectId
  plan        Plans             @relation(fields: [planId], references: [id])
  planId      String            @db.ObjectId
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Plans {
  id                        String         @id @default(auto()) @map("_id") @db.ObjectId
  titleUz                   String
  titleRu                   String
  detailsUz                 String?
  detailsRu                 String?
  descriptionUz             String?
  descriptionRu             String?
  availablePeriod           Int // ! In days
  discount                  Float?
  discountExpiredAt         DateTime?
  includePrivateGroupAccess Boolean?
  includeResources          Boolean        @default(false)
  includeSupport            Boolean        @default(false)
  price                     Float
  courseId                  String         @db.ObjectId
  isDeleted                 Boolean?       @default(false)
  deletedDate               DateTime?
  package                   PlanPackage?
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt
  Transactions              Transactions[]
  MyCourses                 MyCourses[]
}

model MyCourses {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  courseId       String    @db.ObjectId
  planId         String    @db.ObjectId
  plan           Plans     @relation(fields: [planId], references: [id])
  user           Users     @relation(fields: [userId], references: [id])
  userId         String    @db.ObjectId
  purchaseDate   DateTime  @default(now())
  expirationDate DateTime
  Courses        Courses[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Articles {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  titleUz      String
  titleRu      String
  headlineUz   String
  headlineRu   String
  textUz       String
  textRu       String
  articleImageWeb String
  articleImageMobile String
  imageWeb     String
  imageMobile  String
  link         String
  isPublished  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Banners {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  imageWeb    String
  imageMobile String
  link        String
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comments {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  username     String
  occupationUz String?
  occupationRu String?
  textUz       String
  textRu       String
  isPublished  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Statics {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  idx        String   @default("static")
  titleUz    String?
  titleRu    String?
  subTitleUz String?
  subTitleRu String?
  textUz     String?
  textRu     String?
  file       String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum UserRole {
  user
  admin
}

enum TransactionStatus {
  PENDING
  CREATED
  PAID
  CANCELED
}

enum PaymentProvider {
  payme
  uzum
  click
}

enum CourseStatus {
  completed
  inProgress
  archived
  reversed
}

enum PlanPackage {
  basic
  standard
  premium
}
