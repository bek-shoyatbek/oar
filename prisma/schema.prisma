// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  email        String?
  phone        String?
  password     String
  fullname     String?
  avatar       String?
  refreshToken String?
  Transactions Transactions[]
  MyCourse     MyCourses[]
}

model Courses {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  titleUz       String?
  titleRu       String?
  image         String?
  descriptionUz String?
  descriptionRu String?
  courseStatus  CourseStatus @default(inProgress)

  Module Modules[]

  MyCourses   MyCourses? @relation(fields: [myCoursesId], references: [id])
  myCoursesId String?    @db.ObjectId
}

model Modules {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  titleUz       String?
  titleRu       String?
  descriptionUz String?
  descriptionRu String?
  course        Courses   @relation(fields: [courseId], references: [id])
  courseId      String    @db.ObjectId
  Lesson        Lessons[]
}

model Lessons {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  titleUz       String?
  titleRu       String?
  video         String
  descriptionUz String?
  descriptionRu String?
  attachedFile  String?
  module        Modules  @relation(fields: [moduleId], references: [id])
  moduleId      String   @db.ObjectId
}

model Transactions {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  provider  PaymentProvider
  transId   String?           @unique
  amount    Float
  prepareId Int?
  status    TransactionStatus @default(PENDING)
  user      Users             @relation(fields: [userId], references: [id])
  userId    String            @db.ObjectId
  plan      Plans             @relation(fields: [planId], references: [id])
  planId    String            @db.ObjectId
}

model Plans {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  available_period Int // in month
  includes         String?
  price            Float
  courseId         String  @db.ObjectId

  Transactions Transactions[]
  coursesId    String?        @db.ObjectId
  MyCourses    MyCourses[]
}

model MyCourses {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseId String    @db.ObjectId
  planId   String    @db.ObjectId
  plan     Plans     @relation(fields: [planId], references: [id])
  user     Users     @relation(fields: [userId], references: [id])
  userId   String    @unique @db.ObjectId
  Courses  Courses[]
}

model Articles {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  titleUz     String
  titleRu     String
  headlineUz  String
  headlineRu  String
  textUz      String
  textRu      String
  imageWeb    String
  imageMobile String
  link        String
  isPublished Boolean @default(false)
}

model Banners {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  imageWeb    String
  imageMobile String
  link        String
  isPublished Boolean @default(false)
}

model Comments {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username    String
  userAvatar  String
  text        String
  isPublished Boolean @default(false)
}

enum TransactionStatus {
  PENDING
  CREATED
  PAID
  CANCELED
}

enum PaymentProvider {
  payme
  uzum
  click
}

enum CourseStatus {
  completed
  inProgress
  archived
  reversed
}
