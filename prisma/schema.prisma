// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  email        String?
  phone        String?
  password     String
  fullname     String?
  avatar       String?
  refreshToken String?
  Payment      Payment[]
  Plan         Plan[]
  MyCourse     MyCourse[]
}

model Course {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  titleUz       String?
  titleRu       String?
  image         String?
  descriptionUz String?
  descriptionRu String?
  Module        Module[]
  Plan          Plan[]
}

model Module {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  titleUz       String?
  titleRu       String?
  image         String?
  descriptionUz String?
  descriptionRu String?
  course        Course   @relation(fields: [courseId], references: [id])
  courseId      String   @db.ObjectId
  Lesson        Lesson[]
}

model Lesson {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  titleUz       String?
  titleRu       String?
  video         String
  descriptionUz String?
  descriptionRu String?
  attachedFile  String?
  module        Module   @relation(fields: [moduleId], references: [id])
  moduleId      String   @db.ObjectId
}

model Payment {
  id        String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  provider  Payment_providers
  amount    Float
  user      User              @relation(fields: [userId], references: [id])
  userId    String            @db.ObjectId
  plan      Plan              @relation(fields: [planId], references: [id])
  planId    String            @db.ObjectId
}

model Plan {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  provider         Payment_providers
  available_period Int // in month
  includes         String
  price            Float
  user             User              @relation(fields: [userId], references: [id])
  userId           String            @db.ObjectId
  course           Course            @relation(fields: [courseId], references: [id])
  courseId         String            @db.ObjectId
  Payment          Payment[]
  MyCourse         MyCourse?         @relation(fields: [myCourseId], references: [id])
  myCourseId       String?           @db.ObjectId
}

model MyCourse {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  plans  Plan[]
}

enum Payment_providers {
  payme
  uzum
  click
}
