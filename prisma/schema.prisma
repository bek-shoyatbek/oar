// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  email        String?
  phone        String?
  password     String
  fullname     String?
  avatar       String?
  refreshToken String?
  Payment      Payments[]
  MyCourse MyCourses[]
}

model Courses {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  titleUz       String?
  titleRu       String?
  image         String?
  descriptionUz String?
  descriptionRu String?
  courseStatus  CourseStatus @default(inProgress)

  Module Modules[]
  Plan   Plans[]
}

model Modules {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  titleUz       String?
  titleRu       String?
  descriptionUz String?
  descriptionRu String?
  course        Courses   @relation(fields: [courseId], references: [id])
  courseId      String    @db.ObjectId
  Lesson        Lessons[]
}

model Lessons {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  titleUz       String?
  titleRu       String?
  video         String
  descriptionUz String?
  descriptionRu String?
  attachedFile  String?
  module        Modules  @relation(fields: [moduleId], references: [id])
  moduleId      String   @db.ObjectId
}

model Payments {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  provider  PaymentProviders
  transId   String?          @unique
  amount    Float
  prepareId Int?
  status    PaymentStatus    @default(PENDING)
  user      Users            @relation(fields: [userId], references: [id])
  userId    String           @db.ObjectId
  planIds   String[]         @db.ObjectId
  plans     Plans[]          @relation(fields: [planIds], references: [id])
}

model Plans {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  provider         PaymentProviders
  available_period Int // in month
  includes         String
  price            Float

  course     Courses    @relation(fields: [courseId], references: [id])
  courseId   String     @db.ObjectId
  paymentIds String[]   @db.ObjectId
  payments   Payments[] @relation(fields: [paymentIds], references: [id])
  MyCourse   MyCourses? @relation(fields: [myCourseId], references: [id])
  myCourseId String?    @db.ObjectId
}

model MyCourses {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   Users   @relation(fields: [userId], references: [id])
  userId String  @db.ObjectId
  plans  Plans[]
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELED
}

enum PaymentProviders {
  payme
  uzum
  click
}

enum CourseStatus {
  completed
  inProgress
  archived
  reversed
}
